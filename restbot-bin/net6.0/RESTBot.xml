<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RESTbot</name>
    </assembly>
    <members>
        <member name="M:RESTBot.AvatarNameLookupPlugin.getName(RESTBot.RestBot,OpenMetaverse.UUID)">
            <summary>
            key2name (given an avatar UUID, returns the avatar name, if it exists)
            </summary>
            <param name="b">RESTbot object</param>
            <param name="key">UUID of avatar to check</param>
            <returns>Name of the avatar if it exists; String.Empty if not</returns>
        </member>
        <member name="M:RESTBot.AvatarKeyLookupPlugin.getKey(RESTBot.RestBot,System.String)">
            <summary>
            name2key (avatar name to UUID)
            </summary>
            <param name="b">RESTbot object</param>
            <param name="name">Name of avatar to check</param>
            <returns>UUID of corresponding avatar, if it exists</returns>
        </member>
        <member name="M:RESTBot.AvatarOnlineLookupPlugin.getOnline(RESTBot.RestBot,OpenMetaverse.UUID)">
            <summary>
            Get online status of an avatar
            </summary>
            <param name="b">RESTbot object</param>
            <param name="key">UUID of avatar to check</param>
            <returns>true or false, if the avatar is or isn't online</returns>
        </member>
        <member name="M:RESTBot.AvatarProfileLookupPlugin.getProfile(RESTBot.RestBot,OpenMetaverse.UUID)">
            <summary>
            Look up the profile for a UUID
            </summary>
            <param name="b">RESTbot object</param>
            <param name="key">UUID of avatar to check</param>
            <returns>Full profile as a string, or null if profile is empty/does not exist</returns>
            <remark>C# 8+ is stricter when returning nulls, thus the <c>string?</c> method type.</remark>
        </member>
        <member name="M:RESTBot.AvatarGroupsLookupPlugin.getGroups(RESTBot.RestBot,OpenMetaverse.UUID)">
            <summary>
            Returns all groups that an avatar is in, or null if none
            </summary>
            <param name="b">RESTbot object</param>
            <param name="key">UUID of avatar to check</param>
            <returns>List of groups as a XML-formatted string, or null if the avatar does not belong to any group</returns>
            <remark>
              <para>C# 8+ is stricter when returning nulls, thus the <c>string?</c> method type.</para>
            	<para>Note(gwyneth): Instead of returning null, it would make more sense to return an empty XML!</para>
            </remark>
        </member>
        <member name="M:RESTBot.ListItemPlugin.PermMaskString(OpenMetaverse.PermissionMask)">
            <summary>
            Returns a 3-character summary of the PermissionMask
            CMT if the mask allows copy, mod and transfer
            -MT if it disallows copy
            --T if it only allows transfer
            --- if it disallows everything
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:RESTBot.CreateNotecardPlugin">
            <summary>
            Class to create notecards; params are notecard name, notecard (textual data) and optionally a key (item UUID) to embed an item inside the notecard
            </summary>
            <param name="name"></param>
            <param name="notecard"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RESTBot.CreateNotecardPlugin.FetchItem(RESTBot.RestBot,OpenMetaverse.UUID)">
            <summary>
            Fetch an inventory item
            </summary>
            <param name="b">RESTbot object</param>
            <param name="itemID">UUID of inventory item to fetch</param>
            <returns>An InventoryItem object if it exists, null if not</returns>
            <remark>C# 8+ is stricter when returning nulls, thus the <c>InventoryItem?</c> method type.</remark>
        </member>
        <member name="T:RESTBot.MoveToPlugin">
            <summary>move to location; parameters are sim, x, y, z</summary>
        </member>
        <member name="T:RESTBot.MoveToAvatarPlugin">
            <summary>move to avatar location; parameters are sim, avatar</summary>
        </member>
        <member name="F:RESTBot.Reaper.SESSION_TIMEOUT">
            <summary>
            Session timeout timespan
            </summary>
        </member>
        <member name="F:RESTBot.Reaper.REAPER_INTERVAL">
            <summary>
            interval between reaper sweeps in ms
            </summary>
        </member>
        <member name="T:RESTBot.XMLConfig.Configuration">
            <summary>
            Configuration class designed for the `bots array found in the xml config file
            </summary>
            <remarks>To find a copy of this class, see the Configuration class</remarks>
        </member>
        <member name="M:RESTBot.DebugUtilities.WriteInfo(System.String)">
            <summary>
            Outputs text in the normal white color.
            </summary>
            <param name="message">What to be outputted to console</param>
            <example>DebugUtilities.WriteInfo("Listening on 127.0.0.1 on port 80");</example>
            <remarks>This only outputs colored version on console! Will prepend "[INFO] " to message</remarks>
        </member>
        <member name="M:RESTBot.DebugUtilities.WriteDebug(System.String)">
            <summary>
            Outputs text in a gray color.
            </summary>
            <param name="message">What to be outputted to console</param>
            <example>DebugUtilities.WriteDebug("Request recieved - 2048 bytes in buffer");</example>
            <remarks>This only outputs colored version on console! Will prepend "[DEBUG] " to message</remarks>
        </member>
        <member name="M:RESTBot.DebugUtilities.WriteWarning(System.String)">
            <summary>
            Outputs text in a yellow color.
            </summary>
            <param name="message">What to be outputted to console</param>
            <example>DebugUtilities.WriteWarning("Could not find custom configuration file, using default");</example>
            <remarks>This only outputs colored version on console! Will prepend "[WARN] " to message</remarks>
        </member>
        <member name="M:RESTBot.DebugUtilities.WriteError(System.String)">
            <summary>
            Outputs text in a red color.
            </summary>
            <param name="message">What to be outputted to console</param>
            <example>DebugUtilities.WriteError("Socket could not be established, quitting");</example>
            <remarks>This only outputs colored version on console! Will prepend "[ERROR] " to message</remarks>
        </member>
        <member name="M:RESTBot.DebugUtilities.WriteSpecial(System.String)">
            <summary>
            Outputs text in a blue color. Well, it would if log4net had extra logging levels.
            </summary>
            <param name="message">What to be outputted to console</param>
            <example>DebugUtilities.WriteSpecial("Starting login method!");</example>
            <remarks>This only outputs colored version on console! Will prepend "[SPEC] " to message. This type of method should be used temporarly when developing specific blogs of code</remarks>
        </member>
        <member name="M:RESTBot.Program.RegisterAllCommands(System.Reflection.Assembly)">
            <summary>
            Register all RestPlugins to the RestBot static plugin dictionary
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:RESTBot.Program.RegisterAllStatefulPlugins(System.Reflection.Assembly)">
            <summary>
            Grab all the subclass type definitions of StatefulPlugin out of an assembly
            </summary>
            <param name="assembly">Given assembly to search</param>
        </member>
        <member name="M:RESTBot.Program.DoProcessing(RESTBot.Server.RequestHeaders,System.String)">
            <summary>
            Process a request (assuming it exists)
            </summary>
            <param name="headers">Request headers (including path, etc.)</param>
            <param name="body">Request body (will usually have all parameters from POST)</param>
        </member>
        <member name="M:RESTBot.RestBot.AddPlugin(RESTBot.RestPlugin)">
            <summary>
            Add a new plugin to the system
            </summary>
            <param name="Plugin">Plugin name</param>
        </member>
        <member name="F:RESTBot.RestBot.StatefulPluginDefinitions">
            <summary>
            StatefulPlugins stuff
            </summary>
            <param name="defn">List of plugin definitions</param>
        </member>
        <member name="M:RESTBot.RestBot.HandleDataFromRequest(RESTBot.Server.RequestHeaders,System.String)">
            <summary>
            Get the data from the request and parse it
            </summary>
            <param name="request">Request HTTP headers</param>
            <param name="body">Request HTTP body</param>
        </member>
        <member name="M:RESTBot.RestBot.#ctor(OpenMetaverse.UUID,System.String,System.String,System.String)">
            <summary>
            Main entry point for logging in with a bot
            </summary>
            <param name="session">Current session UUID</param>
            <param name="f">Login first name</param>
            <param name="l">Login last name</param>
            <param name="p">MD5-encoded password</param>
        </member>
        <member name="T:RESTBot.RestPlugin">
            <summary>
            A base class for REST plugins
            </summary>
        </member>
        <member name="F:RESTBot.RestPlugin.MethodName">
            <summary>
            The name of the method. Should be set in the constructor.
            </summary>
        </member>
        <member name="M:RESTBot.RestPlugin.Process(RESTBot.RestBot,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Process the request through this method
            </summary>
            <param name="b">The RestBot that is doing the processing</param>
            <param name="Paramaters">QueryString and POST parameters</param>
            <returns>XML output</returns>
        </member>
        <member name="T:RESTBot.StatefulPlugin">
            <summary>
            A base class for stateful plugins, ie those requiring actions on events from a specific instance of libsecondlife
            or RestBot
            </summary>
        </member>
        <member name="F:RESTBot.StatefulPlugin.MethodName">
            <summary>
            The name of the method. Should be set in the constructor.
            </summary>
        </member>
        <member name="M:RESTBot.StatefulPlugin.Initialize(RESTBot.RestBot)">
            <summary>
            An optionally overridable method for setting up events and callbacks from a RestBot
            </summary>
            <param name="bot"></param>
        </member>
        <member name="M:RESTBot.StatefulPlugin.Process(RESTBot.RestBot,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Process the request through this method
            </summary>
            <param name="b">The RestBot that is doing the processing</param>
            <param name="Paramaters">QueryString and POST parameters</param>
            <returns>XML output</returns>
        </member>
        <member name="F:RESTBot.Server.ResponseHeaders.ResponseLine">
            The following _may_ be null...
        </member>
    </members>
</doc>
